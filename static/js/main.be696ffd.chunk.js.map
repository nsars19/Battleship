{"version":3,"sources":["globalStyles.js","components/board/StyledBoard.js","components/board/subcomponents/StyledControls.js","components/board/subcomponents/assets/rotate.webp","components/board/subcomponents/Controls.js","components/board/Board.js","factories/ship/Ship.js","factories/gameBoard/GameBoard.js","factories/player/Player.js","components/winner/StyledWinner.js","components/winner/Winner.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledBoard","styled","div","StyledControls","Controls","boardStatus","shipsPlaced","rotateShip","shuffle","boardComplete","setBoardComplete","style","display","onClick","src","rotateIcon","alt","Board","props","gameBoard","colors","shipStatus","setShipsPlaced","useState","activeShip","setActiveShip","gridState","grid","setGrid","lastRemoved","isPC","pcGrid","setPcGrid","colorTiles","coords","color","forEach","coord","id","join","document","getElementById","backgroundColor","changeShipDirection","e","target","split","map","i","parseInt","ship","getShipByCoord","firstCoords","Object","assign","accent","backMain","handleDrop","dataTransfer","getData","length","removeID","isNaN","shipToRemove","removeCoords","removeShipFromShips","x","y","moveShip","offset","push","newShip","placeShip","placeShipObject","handleDrag","dropEffect","setData","controlProps","info","row","tile","placeShipsRandomly","getShips","name","pc","flex","marginTop","fontFamily","text","textAlign","data-is-pc","shotTile","shots","shot","includes","border","background","hit","miss","transition","handleTurn","onDoubleClick","draggable","onDrop","onDragStart","onDragOver","preventDefault","board","ShipFactory","coordsArr","hitCoords","isSunk","sort","b","every","setCoords","newCoords","pop","hitCoord","GameBoard","buildGrid","misses","ships","clearGrid","_","setTile","spotsTaken","isTaken","idx","indexOf","splice","removeShip","removeShipFromGrid","calculateNewShipCoords","direction","getCurrentDirection","getRootCoord","generatePositions","random","Math","floor","vertical","clearShips","reset","oldCoords","receiveAttack","addMiss","allSunk","getMisses","Player","cpu","attackList","pendingAttacks","flatList","flatMap","addAttack","addPending","playerAttack","generateRandomTile","choice","getHits","attacks","hits","attack","filter","getLegalMoves","choices","generateTileGuesses","console","log","mostRecentHit","legalChoices","secondHit","a","cpuAttack","chosen","attacked","clearAttacks","StyledWinner","Winner","winner","resetGame","player1","player2","App","p1Shots","setP1Shots","p2Shots","setP2Shots","setWinner","backAccent","targetCoord","parentElement","attributes","value","flexFlow","StyledApp","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.be696ffd.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body,\n  * {\n    padding: 0;\n    margin: 0;\n    background-color: #222831;\n    box-sizing: border-box;\n    font-family: Courier, Arial, Sans-Serif;\n  }\n\n  button {\n    margin: 10px;\n    padding: 7px;\n    border: 0 solid transparent;\n    border-radius: 2px;\n    background-color: #393e46;\n    color: #eee;\n    letter-spacing: 1.4px;\n    transition: all 0.1s ease-in-out;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    \n    &:hover {\n      background-color: #424149;\n    }\n    &:active {\n      background-color: #46454a;\n    }\n  }\n\n  img {\n    height: 32px;\n    width: 32px;\n    background: transparent;\n  }\n\n  h3 {\n    font-size: 20px;\n    text-shadow: 1px 1px 2px #111;\n    letter-spacing: 1.3px;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from \"styled-components\";\n\nconst StyledBoard = styled.div`\n  height: 280px;\n  width: 280px;\n  border: 1px solid #393e46;\n  margin: 15px auto;\n  display: grid;\n  grid-template-columns: repeat(10, minmax(5px, 1fr));\n  grid-template-rows: repeat(10, minmax(5px, 1fr));\n  transition: width 0.2s ease-in-out, height 0.2s ease-in-out;\n\n  @media (min-width: 540px) {\n    & {\n      width: 400px;\n      height: 400px;\n    }\n  }\n\n  @media (min-width: 768px) {\n    & {\n      width: 500px;\n      height: 500px;\n    }\n  }\n`;\n\nexport default StyledBoard;\n","import styled from \"styled-components\";\n\nconst StyledControls = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: row-reverse;\n`;\n\nexport default StyledControls;\n","export default __webpack_public_path__ + \"static/media/rotate.02267353.webp\";","import StyledControls from \"./StyledControls\";\nimport rotateIcon from \"./assets/rotate.webp\";\n\nconst Controls = ({ boardStatus, shipsPlaced, rotateShip, shuffle }) => {\n  const { boardComplete, setBoardComplete } = boardStatus;\n\n  return (\n    <StyledControls\n      style={{\n        display: boardComplete ? \"none\" : \"flex\",\n      }}\n    >\n      <button onClick={rotateShip}>\n        <img src={rotateIcon} alt={\"rotate ship\"} />\n      </button>\n      <button onClick={shuffle}>Place Ships</button>\n      <button\n        onClick={() => {\n          if (shipsPlaced) setBoardComplete(true);\n        }}\n      >\n        Start Game\n      </button>\n    </StyledControls>\n  );\n};\n\nexport default Controls;\n","import { useState } from \"react\";\nimport StyledBoard from \"./StyledBoard\";\nimport Controls from \"./subcomponents/Controls\";\n\nconst Board = (props) => {\n  const gameBoard = props.gameBoard;\n  const colors = props.colors;\n  const { boardComplete, setBoardComplete } = props.boardStatus;\n  const { shipsPlaced, setShipsPlaced } = props.shipStatus;\n  const [activeShip, setActiveShip] = useState(null);\n  let { grid, setGrid } = props.gridState;\n  let lastRemoved = null;\n\n  if (props.isPC) {\n    grid = props.gridState.pcGrid;\n    setGrid = props.gridState.setPcGrid;\n  }\n\n  const colorTiles = (coords, color) => {\n    coords.forEach((coord) => {\n      const id = coord.join(\"\");\n      const tile = document.getElementById(id);\n      tile.style.backgroundColor = color;\n    });\n  };\n\n  const placeShipObject = (ship) => {\n    const newShip = gameBoard.placeShip(...ship.coords);\n    colorTiles(newShip.coords, colors.backMain);\n  };\n\n  const placeShip = (e) => {\n    const [x, y] = e.target.id.split(\"\").map((i) => parseInt(i));\n    const length = e.dataTransfer.getData(\"length\");\n    const coords = [];\n\n    let offset = 0;\n    for (let i = 0; i < length; i++) {\n      if (y + i > 9) {\n        offset += 1;\n        coords.push([x, y - offset]);\n      } else {\n        coords.push([x, y + i]);\n      }\n    }\n\n    const newShip = gameBoard.placeShip(...coords);\n    if (newShip) {\n      colorTiles(coords, colors.backMain);\n    } else {\n      return false;\n    }\n\n    setGrid(gameBoard.grid);\n    setActiveShip(newShip);\n\n    return true;\n  };\n\n  const changeShipDirection = (e) => {\n    const coord = e.target.id.split(\"\").map((i) => parseInt(i));\n    const ship = gameBoard.getShipByCoord(coord);\n\n    if (!ship) return false;\n\n    const firstCoords = Object.assign([], ship.coords);\n    colorTiles(firstCoords, colors.accent);\n    if (gameBoard.rotateShip(ship)) {\n      colorTiles(ship.coords, colors.backMain);\n      setGrid(gameBoard.grid);\n    } else {\n      colorTiles(firstCoords, colors.backMain);\n    }\n  };\n\n  const rotateShip = () => {\n    if (!activeShip) return;\n\n    const info = {\n      target: {\n        id: activeShip.coords[0].join(\"\"),\n      },\n    };\n\n    changeShipDirection(info);\n  };\n\n  const moveShip = (e) => {\n    const startCoord = e.dataTransfer\n      .getData(\"id\")\n      .split(\"\")\n      .map((i) => parseInt(i));\n\n    // length of one indicates shipID, which means it was placed from\n    // the 'dock' and not moved from another spot on the board\n    if (startCoord.length === 1) return true;\n\n    const removeID = e.dataTransfer\n      .getData(\"removeShipAt\")\n      .split(\",\")\n      .map((i) => parseInt(i));\n\n    // Return if dragging a blank tile\n    if (isNaN(removeID[0])) return false;\n    const shipToRemove = gameBoard.getShipByCoord(removeID);\n    const removeCoords = shipToRemove.coords;\n    lastRemoved = shipToRemove;\n\n    // Remove ship from ships array\n    gameBoard.removeShipFromShips(shipToRemove);\n\n    // Remove ship from grid\n    removeCoords.forEach((coord) => {\n      const [x, y] = coord;\n      gameBoard.grid[x][y] = \"\";\n    });\n\n    // Change tile color back to empty color\n    colorTiles(removeCoords, colors.accent);\n\n    return true;\n  };\n\n  const handleDrop = (e) => {\n    if (moveShip(e)) {\n      if (!placeShip(e)) {\n        placeShipObject(lastRemoved);\n        lastRemoved = null;\n      }\n    }\n  };\n\n  const handleDrag = (e) => {\n    const id = e.target.id.split(\"\").map((i) => parseInt(i));\n    if (!gameBoard.getShipByCoord(id)) return;\n    const ship = gameBoard.getShipByCoord(id);\n    const length = ship.coords.length;\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"id\", e.target.id);\n    e.dataTransfer.setData(\"length\", length);\n    e.dataTransfer.setData(\"removeShipAt\", id);\n  };\n\n  const shuffle = () => {\n    // Remove ship coloring\n    gameBoard.grid.forEach((row, y) => {\n      row.forEach((tile, x) => {\n        colorTiles([[x, y]], colors.accent);\n      });\n    });\n\n    // Place ships\n    gameBoard.placeShipsRandomly();\n    setShipsPlaced(true);\n    setGrid(gameBoard.grid);\n\n    // Add color to ships\n    const ships = gameBoard.getShips();\n    ships.forEach((ship) => {\n      colorTiles(ship.coords, colors.backMain);\n    });\n  };\n\n  const boardHeader = (name) => {\n    return (\n      <h3\n        style={{\n          fontFamily:\n            \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\",\n          color: colors.text,\n          textAlign: \"center\",\n        }}\n      >\n        {name} Board\n      </h3>\n    );\n  };\n\n  const board = () => {\n    const pc = props.isPC;\n\n    return (\n      <div style={{ flex: \"1 1 auto\", marginTop: \"15px\" }}>\n        {boardHeader(pc ? \"PC's\" : \"My\")}\n        <StyledBoard data-is-pc={pc}>\n          {grid.map((row, x) =>\n            row.map((tile, y) => {\n              const shots = props.shots.map((shot) => shot.join(\"\"));\n              const shotTile = shots.includes(`${x}${y}`);\n              return (\n                <div\n                  style={{\n                    border: \"1px solid #2223\",\n                    background: (function () {\n                      if (shotTile) {\n                        return tile ? colors.hit : colors.miss;\n                      } else if (pc) {\n                        return colors.accent;\n                      } else {\n                        return tile ? colors.backMain : colors.accent;\n                      }\n                    })(),\n                    transition: \"background 0.1s ease-in-out\",\n                  }}\n                  id={`${x}${y}`}\n                  key={`${x}${y}`}\n                  onClick={props.handleTurn}\n                  onDoubleClick={(e) => {\n                    !boardComplete && changeShipDirection(e);\n                  }}\n                  draggable={!boardComplete}\n                  onDrop={handleDrop}\n                  onDragStart={handleDrag}\n                  onDragOver={(e) => {\n                    e.preventDefault();\n                  }}\n                />\n              );\n            })\n          )}\n        </StyledBoard>\n      </div>\n    );\n  };\n\n  const controlProps = {\n    rotateShip,\n    shuffle,\n    shipsPlaced,\n    boardStatus: {\n      boardComplete,\n      setBoardComplete,\n    },\n  };\n\n  return (\n    <>\n      {!props.isPC && <Controls {...controlProps} />}\n      {board()}\n    </>\n  );\n};\n\nexport default Board;\n","const ShipFactory = (coordsArr) => {\n  const hitCoords = [];\n  const coords = coordsArr;\n\n  const isSunk = () => {\n    if (coords.length !== hitCoords.length) return false;\n\n    let [a, b] = [\n      coords.map((i) => i.join(\"\")).sort(),\n      hitCoords.map((i) => i.join(\"\")).sort(),\n    ];\n\n    return a.every((coord) => b.includes(coord));\n  };\n\n  const setCoords = (newCoords) => {\n    while (coords.length !== 0) coords.pop();\n    coords.push(...newCoords);\n  };\n\n  return {\n    coords,\n    isSunk,\n    setCoords,\n    length: () => coords.length,\n    hit: (hitCoord) => hitCoords.push(hitCoord),\n    hitCoords: () => hitCoords,\n  };\n};\n\nexport default ShipFactory;\n","import ShipFactory from \"./../ship/Ship\";\n\nconst GameBoard = () => {\n  const grid = buildGrid();\n  const misses = [];\n  const ships = [];\n\n  function buildGrid() {\n    let grid = [];\n    for (let i = 0; i < 10; i++) {\n      grid[i] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n    }\n    return grid;\n  }\n\n  const clearGrid = () => {\n    grid.forEach((row, y) => {\n      row.forEach((_, x) => {\n        grid[x][y] = \"\";\n      });\n    });\n  };\n\n  const setTile = ([x, y], ship) => {\n    if (!grid[x][y]) grid[x][y] = ship;\n  };\n\n  const spotsTaken = (coords) => {\n    let isTaken = false;\n    for (let coord of coords) {\n      const [x, y] = coord;\n      if (grid[x][y]) {\n        isTaken = true;\n        break;\n      }\n    }\n\n    return isTaken;\n  };\n\n  const getShipByCoord = (coord) => {\n    const [x, y] = coord;\n    const ship = grid[x][y];\n\n    if (!ship) return false;\n\n    return ship;\n  };\n\n  const placeShip = (...coords) => {\n    const ship = ShipFactory(coords);\n\n    // Prevent overlap\n    if (spotsTaken(coords)) return false;\n\n    ships.push(ship);\n\n    for (let coord of coords) {\n      setTile(coord, ship);\n    }\n\n    return ship;\n  };\n  const removeShipFromShips = (ship) => {\n    const idx = ships.indexOf(ship);\n\n    if (idx !== -1) {\n      ships.splice(idx, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n  const removeShipFromGrid = (ship) => {\n    const coords = ship.coords;\n    for (let coord of coords) {\n      const [x, y] = coord;\n      grid[x][y] = \"\";\n    }\n  };\n\n  const removeShip = (ship) => {\n    removeShipFromShips(ship);\n    removeShipFromGrid(ship);\n  };\n\n  const getCurrentDirection = (coords) => {\n    const x = coords[0][0];\n    const y = coords[1][0];\n\n    return x === y ? \"vertical\" : \"horizontal\";\n  };\n\n  const getRootCoord = (coords) => {\n    return Object.assign([], coords).sort()[0];\n  };\n\n  const calculateNewShipCoords = (ship) => {\n    const coords = ship.coords;\n    const length = coords.length;\n    const direction = getCurrentDirection(coords);\n    const [x, y] = getRootCoord(coords, direction);\n    const newCoords = [];\n\n    if (direction === \"vertical\") {\n      // If a new tile will overlap the grid add it to the other side of the\n      // root node instead. Offset distance counts each instance of overlapping\n      // and then uses that value to place overlapping tiles\n      let offset = 0;\n      for (let i = 0; i < length; i++) {\n        if (x + i > 9) {\n          offset += 1;\n          newCoords.push([x - offset, y]);\n        } else {\n          newCoords.push([x + i, y]);\n        }\n      }\n    } else {\n      let offset = 0;\n      for (let i = 0; i < length; i++) {\n        if (y + i > 9) {\n          offset += 1;\n          newCoords.push([x, y - offset]);\n        } else {\n          newCoords.push([x, y + i]);\n        }\n      }\n    }\n\n    return newCoords;\n  };\n\n  const rotateShip = (ship) => {\n    if (ship.coords.length === 1) return true;\n\n    const oldCoords = ship.coords;\n    const newCoords = calculateNewShipCoords(ship);\n\n    removeShip(ship);\n    if (placeShip(...newCoords)) {\n      ship.setCoords(newCoords);\n      return true;\n    } else {\n      placeShip(...oldCoords);\n      return false;\n    }\n  };\n\n  const addMiss = (coord) => misses.push(coord);\n\n  const receiveAttack = (coord) => {\n    const [x, y] = coord;\n    // If ship is at coords mark it hit, otherwise count as a miss\n    grid[x][y] ? grid[x][y].hit(coord) : addMiss(coord);\n  };\n\n  const allSunk = () => {\n    return ships.every((ship) => ship.isSunk());\n  };\n\n  const generatePositions = (length) => {\n    const random = () => Math.floor(Math.random() * 10);\n    const vertical = random() >= 5 ? true : false;\n    let x = random();\n    let y = random();\n    let coords = [];\n\n    let offset = 0;\n    for (let i = 0; i < length; i++) {\n      if (vertical) {\n        if (y + i > 9) {\n          offset += 1;\n          coords.push([x, y - offset]);\n        } else {\n          coords.push([x, y + i]);\n        }\n      } else {\n        if (x + i > 9) {\n          offset += 1;\n          coords.push([x - offset, y]);\n        } else {\n          coords.push([x + i, y]);\n        }\n      }\n    }\n\n    while (spotsTaken(coords)) {\n      coords = generatePositions(length);\n    }\n    return coords;\n  };\n\n  const clearShips = () => {\n    while (ships.length) {\n      ships.pop();\n    }\n  };\n\n  const placeShipsRandomly = () => {\n    clearGrid();\n    clearShips();\n    const lengths = [1, 1, 2, 2, 3, 4, 5];\n    for (let length of lengths) {\n      const coords = generatePositions(length);\n      placeShip(...coords);\n    }\n  };\n\n  const reset = () => {\n    clearGrid();\n    clearShips();\n  };\n\n  return {\n    reset,\n    placeShipsRandomly,\n    generatePositions,\n    getShipByCoord,\n    rotateShip,\n    placeShip,\n    receiveAttack,\n    allSunk,\n    grid,\n    removeShipFromShips,\n    spotsTaken,\n    getShips: () => ships,\n    getMisses: () => misses,\n  };\n};\n\nexport default GameBoard;\n","import GameBoard from \"./../gameBoard/GameBoard\";\n\nconst Player = (cpu = false) => {\n  const board = GameBoard();\n  const attackList = [];\n  const pendingAttacks = [];\n  const flatList = () => attackList.flatMap((coord) => coord.join(\"\"));\n  const addAttack = (coord) => attackList.push(coord);\n  const addPending = (coords) => pendingAttacks.push(...coords);\n\n  const playerAttack = (coord, board) => {\n    // console.log({ coord });\n    if (flatList().includes(coord.join(\"\"))) return false;\n\n    board.receiveAttack(coord);\n    addAttack(coord);\n    return true;\n  };\n\n  const generateRandomTile = () => {\n    const random = () => Math.floor(Math.random() * 10);\n    let choice = [random(), random()];\n    while (flatList().includes(choice.join(\"\"))) {\n      choice = [random(), random()];\n    }\n\n    return choice;\n  };\n\n  function getHits(attacks, ships, hits = []) {\n    if (attacks.length === 0) return hits;\n\n    const attack = attacks.pop();\n    let ship = ships.filter((ship) => ship.hitCoords().includes(attack))[0];\n\n    if (ship) hits.push(attack);\n    return getHits(attacks, ships, hits);\n  }\n\n  const multiDimensionalUnique = (arr) => {\n    let uniques = [];\n    let itemsFound = {};\n    for (let i = 0, l = arr.length; i < l; i++) {\n      let stringified = JSON.stringify(arr[i]);\n      if (itemsFound[stringified]) {\n        continue;\n      }\n      uniques.push(arr[i]);\n      itemsFound[stringified] = true;\n    }\n    return uniques;\n  };\n\n  const getLegalMoves = (choices) => {\n    return choices\n      .filter((coord) => {\n        return coord[0] >= 0 && coord[1] >= 0 && coord[0] < 10 && coord[1] < 10;\n      })\n      .filter((coord) => !flatList().includes(coord.join(\"\")));\n  };\n\n  const generateTileGuesses = (board) => {\n    console.log({ pendingAttacks });\n    if (pendingAttacks.length > 0) {\n      console.log({ pendingAttacks });\n      return pendingAttacks.pop();\n    }\n    const attacks = Object.assign([], attackList);\n    const ships = board.getShips();\n    const hits = getHits(attacks, ships);\n    const mostRecentHit = hits[0];\n    const ship = ships.filter((ship) =>\n      ship.hitCoords().includes(mostRecentHit)\n    )[0];\n\n    if (!mostRecentHit || ship.isSunk()) {\n      return generateRandomTile();\n    } else {\n      // If it's the first hit on a ship shoot in a plus sign to establish direction\n      if (ship.hitCoords().length === 1) {\n        const [x, y] = mostRecentHit;\n        const plusSignAttacks = [\n          [x, y + 1],\n          [x, y - 1],\n          [x + 1, y],\n          [x - 1, y],\n        ];\n\n        const legalChoices = getLegalMoves(plusSignAttacks);\n        addPending(legalChoices);\n        console.log({ pendingAttacks });\n        return legalChoices;\n      } else {\n        const secondHit = hits[1];\n        const [a, b] = secondHit;\n        const [x, y] = mostRecentHit;\n\n        // Establish direction of ship\n        if (x === a) {\n          const choices = [\n            [x, y + 1],\n            [x, y - 1],\n            [a, b + 1],\n            [a, b - 1],\n          ];\n\n          const legalChoices = getLegalMoves(choices);\n          addPending(legalChoices);\n          return legalChoices;\n        }\n\n        if (b === y) {\n          const choices = [\n            [x + 1, y],\n            [x - 1, y],\n            [a + 1, b],\n            [a - 1, b],\n          ];\n\n          const legalChoices = getLegalMoves(choices);\n          addPending(legalChoices);\n          return legalChoices;\n        }\n\n        // const uniqueChoices = multiDimensionalUnique(choices)\n        //   .filter(\n        //     (coord) => !hits.map((i) => i.join(\"\")).includes(coord.join(\"\"))\n        //   )\n        //   .filter((coord) => {\n        //     return (\n        //       coord[0] >= 0 && coord[1] >= 0 && coord[0] < 10 && coord[1] < 10\n        //     );\n        //   });\n\n        // if (uniqueChoices.length !== 0) {\n        //   uniqueChoices.forEach((choice) => pendingAttacks.push(choice));\n        //   // Filter out previous hits\n        //   return uniqueChoices;\n        // } else {\n        //   // Choosen tile above, below, to the left, or to the right (eg. plus sign)\n        //   const [x, y] = hits[0];\n        //   choices.push([x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]);\n        //   const filteredChoices = choices\n        //     .filter((coord) => {\n        //       return (\n        //         coord[0] >= 0 && coord[1] >= 0 && coord[0] < 10 && coord[1] < 10\n        //       );\n        //     })\n        //     .filter((coord) => !flatList().includes(coord.join(\"\")))\n        //     .sort();\n\n        //   filteredChoices.forEach((choice) => pendingAttacks.push(choice));\n\n        //   return filteredChoices.length\n        //     ? filteredChoices\n        //     : generateRandomTile();\n        // }\n      }\n    }\n  };\n\n  const cpuAttack = (board) => {\n    const coords = generateTileGuesses(board);\n    const idx = Math.floor(Math.random() * coords.length);\n\n    let chosen = typeof coords[0] === \"number\" ? coords : coords[idx];\n    // console.log({ chosen });\n    // chosen = generateRandomTile();\n    let attacked = false;\n    while (!attacked) {\n      attacked = playerAttack(chosen, board);\n    }\n    return attacked;\n  };\n\n  const attack = (coord, board) => {\n    return cpu ? cpuAttack(board) : playerAttack(coord, board);\n  };\n\n  const clearAttacks = () => {\n    while (attackList.length) {\n      attackList.pop();\n    }\n  };\n\n  const reset = () => {\n    clearAttacks();\n    board.reset();\n  };\n\n  return {\n    pendingAttacks,\n    cpuAttack,\n    getHits,\n    reset,\n    attack,\n    attackList,\n    board,\n    generateTileGuesses,\n  };\n};\n\nexport default Player;\n\n// hits.sort((firstHit, secondHit) => {\n//   const [x, y] = firstHit;\n//   const [a, b] = secondHit;\n\n//   // Check direction of ships\n//   if (x === a) {\n//     // Vertical ships\n//     choices.push(\n//       ...new Set([\n//         [x, y + 1],\n//         [x, y - 1],\n//         [a, b + 1],\n//         [a, b - 1],\n//       ])\n//     );\n//   }\n//   if (y === b) {\n//     // Horizontal ships\n//     choices.push(\n//       ...new Set([\n//         [x + 1, y],\n//         [x - 1, y],\n//         [a + 1, b],\n//         [a - 1, b],\n//       ])\n//     );\n//   }\n// });\n","import styled from \"styled-components\";\n\nconst StyledWinner = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  h1 {\n    color: #eee;\n    letter-spacing: 1.3px;\n    text-shadow: 1px 1px 2px #222;\n    font-size: 2.5em;\n    margin-top: 90px;\n  }\n\n  button {\n    padding: 10px;\n    margin-top: 30px;\n    width: 180px;\n    font-size: 18px;\n    font-weight: bold;\n    letter-spacing: 1.3px;\n  }\n`;\n\nexport default StyledWinner;\n","import StyledWinner from \"./StyledWinner\";\n\nconst Winner = ({ winner, resetGame }) => {\n  return (\n    <StyledWinner>\n      <h1>\n        {winner}\n        {winner === \"PC\" ? \" wins!\" : \" win!\"}\n      </h1>\n      <button onClick={resetGame}>Play Again</button>\n    </StyledWinner>\n  );\n};\n\nexport default Winner;\n","import Board from \"./components/board/Board\";\nimport Player from \"./factories/player/Player\";\nimport Winner from \"./components/winner/Winner\";\nimport { useState } from \"react\";\n\nconst player1 = Player();\nconst player2 = Player(true); // PC opponent;\n// Set PC players board\nplayer2.board.placeShipsRandomly();\n\nfunction App() {\n  const [grid, setGrid] = useState(player1.board.grid);\n  const [pcGrid, setPcGrid] = useState(player2.board.grid);\n  const [boardComplete, setBoardComplete] = useState(false);\n  const [shipsPlaced, setShipsPlaced] = useState(false);\n  const [p1Shots, setP1Shots] = useState(player1.attackList);\n  const [p2Shots, setP2Shots] = useState(player2.attackList);\n  const [winner, setWinner] = useState(null);\n\n  const colors = {\n    backMain: \"#222831\",\n    backAccent: \"#393E46\",\n    text: \"#EEE\",\n    accent: \"#00ADB5\",\n    hit: \"#803434\",\n    miss: \"#8a8a8a\",\n  };\n\n  const clearState = () => {\n    setWinner(null);\n    setGrid(player1.board.grid);\n    setPcGrid(player2.board.grid);\n    setBoardComplete(false);\n    setShipsPlaced(false);\n    setP1Shots(player1.attackList);\n    setP2Shots(player2.attackList);\n  };\n\n  const resetGame = () => {\n    player1.reset();\n    player2.reset();\n    player2.board.placeShipsRandomly();\n    clearState();\n  };\n\n  const handleTurn = (e) => {\n    const targetCoord = e.target.id.split(\"\").map((i) => parseInt(i));\n    const isPcBoard =\n      e.target.parentElement.attributes[\"data-is-pc\"].value === \"true\";\n\n    // Return if clicking on own board\n    if (!isPcBoard) return;\n\n    // Check if game is over\n    if (player1.board.allSunk()) {\n      setWinner(\"PC\");\n      return;\n    }\n\n    if (player2.board.allSunk()) {\n      setWinner(\"You\");\n      return;\n    }\n\n    // Return if clicking on previously chosen tile\n    if (!player1.attack(targetCoord, player2.board)) return;\n    setP1Shots([...p1Shots, player1.attackList[player1.attackList.length - 1]]);\n\n    player2.attack(null, player1.board);\n    setP2Shots([...p2Shots, player2.attackList[player2.attackList.length - 1]]);\n  };\n\n  const board = (isPC = false) => {\n    return (\n      <Board\n        gameBoard={isPC ? player2.board : player1.board}\n        gridState={isPC ? { pcGrid, setPcGrid } : { grid, setGrid }}\n        isPC={isPC}\n        shots={isPC ? p1Shots : p2Shots}\n        colors={colors}\n        boardStatus={{ boardComplete, setBoardComplete }}\n        shipStatus={{ shipsPlaced, setShipsPlaced }}\n        handleTurn={handleTurn}\n        winner={winner}\n      />\n    );\n  };\n\n  // Render winner if there is a winner, else render both boards if the player has\n  // set their board, else render just the player's board\n  return (\n    <>\n      {(winner && <Winner winner={winner} resetGame={resetGame} />) ||\n        (boardComplete && (\n          <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\n            {board()}\n            {board(true)}\n          </div>\n        )) ||\n        board()}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyle from \"./globalStyles\";\nimport App from './App';\nimport styled from \"styled-components\";\n\nconst StyledApp = styled(App)`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <StyledApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}